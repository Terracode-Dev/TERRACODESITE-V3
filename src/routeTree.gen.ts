/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestRouteImport } from './routes/test'
import { Route as ServiceRouteImport } from './routes/service'
import { Route as PricingRouteImport } from './routes/pricing'
import { Route as HomeRouteImport } from './routes/home'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as CareerRouteImport } from './routes/career'
import { Route as ArticlesRouteImport } from './routes/articles'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'

const TestRoute = TestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRouteImport,
} as any)
const ServiceRoute = ServiceRouteImport.update({
  id: '/service',
  path: '/service',
  getParentRoute: () => rootRouteImport,
} as any)
const PricingRoute = PricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const CareerRoute = CareerRouteImport.update({
  id: '/career',
  path: '/career',
  getParentRoute: () => rootRouteImport,
} as any)
const ArticlesRoute = ArticlesRouteImport.update({
  id: '/articles',
  path: '/articles',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/articles': typeof ArticlesRoute
  '/career': typeof CareerRoute
  '/contact': typeof ContactRoute
  '/home': typeof HomeRoute
  '/pricing': typeof PricingRoute
  '/service': typeof ServiceRoute
  '/test': typeof TestRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/articles': typeof ArticlesRoute
  '/career': typeof CareerRoute
  '/contact': typeof ContactRoute
  '/home': typeof HomeRoute
  '/pricing': typeof PricingRoute
  '/service': typeof ServiceRoute
  '/test': typeof TestRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/articles': typeof ArticlesRoute
  '/career': typeof CareerRoute
  '/contact': typeof ContactRoute
  '/home': typeof HomeRoute
  '/pricing': typeof PricingRoute
  '/service': typeof ServiceRoute
  '/test': typeof TestRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/articles'
    | '/career'
    | '/contact'
    | '/home'
    | '/pricing'
    | '/service'
    | '/test'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/articles'
    | '/career'
    | '/contact'
    | '/home'
    | '/pricing'
    | '/service'
    | '/test'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/articles'
    | '/career'
    | '/contact'
    | '/home'
    | '/pricing'
    | '/service'
    | '/test'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ArticlesRoute: typeof ArticlesRoute
  CareerRoute: typeof CareerRoute
  ContactRoute: typeof ContactRoute
  HomeRoute: typeof HomeRoute
  PricingRoute: typeof PricingRoute
  ServiceRoute: typeof ServiceRoute
  TestRoute: typeof TestRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/service': {
      id: '/service'
      path: '/service'
      fullPath: '/service'
      preLoaderRoute: typeof ServiceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/career': {
      id: '/career'
      path: '/career'
      fullPath: '/career'
      preLoaderRoute: typeof CareerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/articles': {
      id: '/articles'
      path: '/articles'
      fullPath: '/articles'
      preLoaderRoute: typeof ArticlesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ArticlesRoute: ArticlesRoute,
  CareerRoute: CareerRoute,
  ContactRoute: ContactRoute,
  HomeRoute: HomeRoute,
  PricingRoute: PricingRoute,
  ServiceRoute: ServiceRoute,
  TestRoute: TestRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
